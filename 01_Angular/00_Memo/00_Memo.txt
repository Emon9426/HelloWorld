1. Angular CLI依赖环境
    1.0 Angular CLI：
        - Angular应用程序的初始化
        - 内置的开发服务器
        - 代码变更浏览器自动刷新
        - 创建组件、指令、服务等集成工具
        - 测试和维护
        - ...
    1-1 依赖环境的安装
        1-1-1 Node.js
            - 官网下载：https://nodejs.org
            - npm环境会跟随Node.js一起被安装
            - 确认：
                node -v
                npm -v
        1-1-2 Python
            - 官网下载：https://www.Python.org
            - 安装时勾选"添加python to PATH"
            - 确认：
                python --version
        1-1-3 安装C++编译工具
            - 用管理员CMD执行：
                npm install --global --production windows-build-tools
            - 如果安装了visual studio或其他操作系统不需要安装
            - 需要先安装python2.7 否则会报错
        1-1-4 安装cnpm(淘宝镜像)
            - npm i -g cnpm --registry=https://registry.npm.taobao.org
            - 淘宝将npm在国内做的镜像

2. 安装脚手架工具Angular CLI
    2-1 安装Angular CLI
        npm i -g @angular/cli
        - 需要从网上获取，当网络不通时，使用cnpm
        - 确认：
            ng --version
        - 如果安装失败，需要手动删除已经安装的angular/cli
            npm unistall -g @angular/cli

3. 使用脚手架初始化Angular
    3-1 新建一个workspace
    3-2 执行
        ng new my-app
        - 程序会新建目录 然后会使用npm下载包所需要的依赖
        - 如果在网络不通的情况下：
            - Ctrl+C 终端npm的安装过程
            - cd my-app
            - cnpm install
    3-3 启动方式
        - 进入到工程根目录
            ng serve (ng start)
        - 启动成功后
            http://localhost:4200/webpack-dev-server/
          查看初始化的结果
        - 该命令会默认占用4200端口，如果需要修改可以通过
            ng serve --port 3000
          来指定端口
        - REF 20191210

4. Angular的默认目录
    App-Name
        |- e2e                      :端到端测试目录，做自动化测试
        |- node_modules             :项目依赖包
        |- src                      :应用的源代码目录
        |   |- app                  :我们的代码放到这里面
        |   |   |- App.component.ts     :组件
        |   |   |- App.module.ts        :模块
        |   |   *一个Angular工程至少有一个组件+一个模块
        |   |- assets
        |   |- environments
        |   |- main.ts              :程序的入口
        |   |- index.html           :程序的模板
        |- Angular-cli.json         :angular命令行工具的配置文件
        |- karma.conf.js            :kamar自动化测试的集成器的执行器
        |- Package.json             :做angular开发用到的各个模块版本
        |- Protractor.conf.js       :自动化测试执行的配置文件
        |- tslint.json              :定义代码质量检查的规则
        |- tsconfig.json            :typescript编译器的配置，已经按照angular项目标准已经配好了，大家不用动
        |- .editorconfig            :定义编辑器的风格，例如TAB键缩进几个空格
        |- ReadMe                   :angular命令行工具生成的标准说明
    4-1 Angular的启动过程
        - <Angular.json>  [编译依赖文件]
            |           * root    会对应应用的根目录
            |           * index   对应的程序启动时加载的页面(模板)
            |           * main    对应程序启动时加载的脚本，负责引导程序启动
            |- <main.ts>  [根据main属性指定的文件，找到main.ts]
            |   |       * 引入enableProdMode模块：该模块为打开浏览器的开发者模式
            |   |       * 引入platformBrowserDynamic模块：该模块的作用为启动当前应用
            |   |       * 引入环境配置文件enviromnent：用于区分生产环节/开发环境
            |   |       * 引入AppModule：应用的主模块，被bootstrapModule调用 → 根据这个属性找到app.module.ts
            |   |- <app.module.ts> [程序的主模块]       
            |   |   |   * 由@NgModule装饰器声明
            |   |   |   * declarations属性：声明了这个模块有什么东西，只包括 组件、指令和管道
            |   |   |   * imports属性     ：要让程序正常运转还需要什么东西
            |   |   |       - BrowerModule是必须的，为了保证在浏览器中运行
            |   |   |   * providers属性   ：声明模块中提供了什么服务，与依赖注入有关
            |   |   |   * bootstrap属性   ：声明模块的主组件 → 根据这个属性找到AppComponent
            |   |   |- <app.component.ts> [程序的主组件]
            |   |   |   * 不使用router的情况
            |   |   |       * app-root属性    ：定义了程序的跳转
            |   |   |       * templateUrl属性 ：主模块要加载的页面，这个html页面会替代<Angular.json>中index指向的index.html中的<app-root></app-root>中间的部分
            |   |   |       * styleUrls属性   ：定义了要加载的页面需要引用的css
            |   |   |   * 使用router的情况
            |   |   |       * 查看<app-routing.module.ts>中的配置
            |   |   |       * {path: '', component: NewWorkspacesComponent, pathMatch: 'full'}
            |   |   |          - path     :在浏览器中输入的地址，例如 path:'main' 对应http://localhost:4200/main
            |   |   |          - component:所要跳转的组件，需要在import中声明
        
        - <Angular.json>首先通过Angular.json找到程序的启动入口 <main.ts>，和启动页面<index.html>
          |- <index.html> → 其中会有<app-root></app-root>作为程序输出的结果，最终会被根组件替换掉
          |- <Main.ts>中指定了根模块<app.module.ts>
            |- <app.module.ts> 根模块中指定了根组件<app.component.ts>
                |- 根组件会渲染相关的页面，替换掉<index.html中的<app-root>

5. 核心特性
    5.1 组件(components)
        - Angular中的一切都是围绕着组件
        - 分治：把一些复杂的业务流程和功能拆分成一个一个小的组件中
        - 复用：一些组件的功能可以通用，提高维护效率和开发效率
        - app.component.ts
            * 在NG中，组件就是一个class
        - 创建组件
            ng generate component <name>
            --===output===-----------------------------------------------------------------------------------
            |C:\WorkSpace\00_Git\01_Angular\00_Memo\my-app>ng generate component foo
            |CREATE src/app/foo/foo.component.html (18 bytes)        → 生成的新的组件
            |CREATE src/app/foo/foo.component.spec.ts (607 bytes)    → 生成的新的组件
            |CREATE src/app/foo/foo.component.ts (257 bytes)         → 生成的新的组件
            |CREATE src/app/foo/foo.component.css (0 bytes)          → 生成的新的组件
            |UPDATE src/app/app.module.ts (463 bytes)                → 自动更新import部分和declaration部分
            -------------------------------------------------------------------------------------------------
            组件自动生成完毕后，可以在跟组件的模板(app.component.html)中添加组件定义的出口(foo.component.ts中的selector定义的标签)
            即可在根组件的模板中看到新增的组件的模板内容